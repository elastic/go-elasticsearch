// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package client

import (
	"fmt"
	"net/http"
	"reflect"
	"runtime"
)

// Count allows to easily execute a query and get the number of matches for that query. See http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html for more info.
//
// body: a query to restrict the results specified with the Query DSL (optional).
//
// options: optional parameters. Supports the following functional options: WithIndex, WithType, WithAllowNoIndices, WithAnalyzeWildcard, WithAnalyzer, WithDefaultOperator, WithDf, WithExpandWildcards, WithIgnoreUnavailable, WithLenient, WithMinScore, WithPreference, WithQ, WithRouting, see the Option type in this package for more info.
func (c *Client) Count(body map[string]interface{}, options ...Option) (*http.Response, error) {
	supportedOptions := map[string]struct{}{
		"WithIndex":             struct{}{},
		"WithType":              struct{}{},
		"WithAllowNoIndices":    struct{}{},
		"WithAnalyzeWildcard":   struct{}{},
		"WithAnalyzer":          struct{}{},
		"WithDefaultOperator":   struct{}{},
		"WithDf":                struct{}{},
		"WithExpandWildcards":   struct{}{},
		"WithIgnoreUnavailable": struct{}{},
		"WithLenient":           struct{}{},
		"WithMinScore":          struct{}{},
		"WithPreference":        struct{}{},
		"WithQ":                 struct{}{},
		"WithRouting":           struct{}{},
	}
	for _, option := range options {
		name := runtime.FuncForPC(reflect.ValueOf(option).Pointer()).Name()
		if _, ok := supportedOptions[name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", name)
		}
	}
	req := &http.Request{
		Method: "POST",
	}
	return c.client.Do(req)
}
