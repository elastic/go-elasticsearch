// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package client

import (
	"fmt"
	"net/http"
	"reflect"
	"runtime"
)

// Update allows to update a document based on a script provided. See http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html for more info.
//
// id: document ID.
//
// index: the name of the index.
//
// documentType: the type of the document.
//
// body: the request definition using either script or partial doc.
//
// options: optional parameters. Supports the following functional options: WithSource, WithSourceExclude, WithSourceInclude, WithFields, WithLang, WithParent, WithRefresh, WithRetryOnConflict, WithRouting, WithTimeout, WithTimestamp, WithTTL, WithVersion, WithVersionType, WithWaitForActiveShards, see the Option type in this package for more info.
func (c *Client) Update(id string, index string, documentType string, body map[string]interface{}, options ...Option) (*http.Response, error) {
	supportedOptions := map[string]struct{}{
		"WithSource":              struct{}{},
		"WithSourceExclude":       struct{}{},
		"WithSourceInclude":       struct{}{},
		"WithFields":              struct{}{},
		"WithLang":                struct{}{},
		"WithParent":              struct{}{},
		"WithRefresh":             struct{}{},
		"WithRetryOnConflict":     struct{}{},
		"WithRouting":             struct{}{},
		"WithTimeout":             struct{}{},
		"WithTimestamp":           struct{}{},
		"WithTTL":                 struct{}{},
		"WithVersion":             struct{}{},
		"WithVersionType":         struct{}{},
		"WithWaitForActiveShards": struct{}{},
	}
	for _, option := range options {
		name := runtime.FuncForPC(reflect.ValueOf(option).Pointer()).Name()
		if _, ok := supportedOptions[name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", name)
		}
	}
	req := &http.Request{
		Method: "POST",
	}
	return c.client.Do(req)
}
