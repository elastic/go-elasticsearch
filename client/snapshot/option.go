// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package snapshot

import (
	"net/http"
	"time"
)

// Option is a non-required API option that gets applied to an HTTP request.
type Option func(r *http.Request)

// WithErrorTrace include the stack trace of returned errors.
func WithErrorTrace(errorTrace bool) Option {
	return func(r *http.Request) {
	}
}

// WithFilterPath a comma-separated list of filters used to reduce the respone.
func WithFilterPath(filterPath []string) Option {
	return func(r *http.Request) {
	}
}

// WithHuman return human readable values for statistics.
func WithHuman(human bool) Option {
	return func(r *http.Request) {
	}
}

// WithIgnoreUnavailable whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown.
func WithIgnoreUnavailable(ignoreUnavailable bool) Option {
	return func(r *http.Request) {
	}
}

// WithLocal return local information, do not retrieve the state from master node (default: false).
func WithLocal(local bool) Option {
	return func(r *http.Request) {
	}
}

// WithMasterTimeout explicit operation timeout for connection to master node.
func WithMasterTimeout(masterTimeout time.Time) Option {
	return func(r *http.Request) {
	}
}

// WithPretty pretty format the returned JSON response.
func WithPretty(pretty bool) Option {
	return func(r *http.Request) {
	}
}

// WithRepository a comma-separated list of repository names.
func WithRepository(repository []string) Option {
	return func(r *http.Request) {
	}
}

// WithSourceParam the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithSourceParam(sourceParam string) Option {
	return func(r *http.Request) {
	}
}

// WithTimeout explicit operation timeout.
func WithTimeout(timeout time.Time) Option {
	return func(r *http.Request) {
	}
}

// WithVerify whether to verify the repository after creation.
func WithVerify(verify bool) Option {
	return func(r *http.Request) {
	}
}

// WithWaitForCompletion should this request wait until the operation has completed before returning.
func WithWaitForCompletion(waitForCompletion bool) Option {
	return func(r *http.Request) {
	}
}
