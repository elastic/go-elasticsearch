// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package client

import (
	"fmt"
	"net/http"
	"net/url"
)

// DeleteByQuery - see https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html for more info.
//
// index: a comma-separated list of index names to search; use "_all" or empty string to perform the operation on all indices.
//
// body: the search definition using the Query DSL.
//
// options: optional parameters. Supports the following functional options: WithAllowNoIndices, WithAnalyzeWildcard, WithAnalyzer, WithConflicts, WithDefaultOperator, WithDf, WithType, WithErrorTrace, WithExpandWildcards, WithFilterPath, WithFrom, WithHuman, WithIgnoreUnavailable, WithLenient, WithPreference, WithPretty, WithQ, WithRefresh, WithRequestCache, WithRequestsPerSecond, WithRouting, WithScroll, WithScrollSize, WithSearchTimeout, WithSearchType, WithSize, WithSlices, WithSort, WithSource, WithSourceExclude, WithSourceInclude, WithSourceParam, WithStats, WithTerminateAfter, WithTimeout, WithVersion, WithWaitForActiveShards, WithWaitForCompletion, see the Option type in this package for more info.
func (c *Client) DeleteByQuery(index []string, body map[string]interface{}, options ...*Option) (*http.Response, error) {
	supportedOptions := map[string]struct{}{
		"WithAllowNoIndices":      struct{}{},
		"WithAnalyzeWildcard":     struct{}{},
		"WithAnalyzer":            struct{}{},
		"WithConflicts":           struct{}{},
		"WithDefaultOperator":     struct{}{},
		"WithDf":                  struct{}{},
		"WithType":                struct{}{},
		"WithErrorTrace":          struct{}{},
		"WithExpandWildcards":     struct{}{},
		"WithFilterPath":          struct{}{},
		"WithFrom":                struct{}{},
		"WithHuman":               struct{}{},
		"WithIgnoreUnavailable":   struct{}{},
		"WithLenient":             struct{}{},
		"WithPreference":          struct{}{},
		"WithPretty":              struct{}{},
		"WithQ":                   struct{}{},
		"WithRefresh":             struct{}{},
		"WithRequestCache":        struct{}{},
		"WithRequestsPerSecond":   struct{}{},
		"WithRouting":             struct{}{},
		"WithScroll":              struct{}{},
		"WithScrollSize":          struct{}{},
		"WithSearchTimeout":       struct{}{},
		"WithSearchType":          struct{}{},
		"WithSize":                struct{}{},
		"WithSlices":              struct{}{},
		"WithSort":                struct{}{},
		"WithSource":              struct{}{},
		"WithSourceExclude":       struct{}{},
		"WithSourceInclude":       struct{}{},
		"WithSourceParam":         struct{}{},
		"WithStats":               struct{}{},
		"WithTerminateAfter":      struct{}{},
		"WithTimeout":             struct{}{},
		"WithVersion":             struct{}{},
		"WithWaitForActiveShards": struct{}{},
		"WithWaitForCompletion":   struct{}{},
	}
	req := &http.Request{
		URL: &url.URL{
			Scheme: c.transport.Scheme,
			Host:   c.transport.Host,
		},
		Method: "POST",
	}
	for _, option := range options {
		if _, ok := supportedOptions[option.name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", option.name)
		}
		option.apply(req)
	}
	return c.transport.Do(req)
}
