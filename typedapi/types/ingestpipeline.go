// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated from the elasticsearch-specification DO NOT EDIT.
// https://github.com/elastic/elasticsearch-specification/tree/d520d9e8cf14cad487de5e0654007686c395b494

package types

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strconv"

	"github.com/elastic/go-elasticsearch/v9/typedapi/types/enums/fieldaccesspattern"
)

// IngestPipeline type.
//
// https://github.com/elastic/elasticsearch-specification/blob/d520d9e8cf14cad487de5e0654007686c395b494/specification/ingest/_types/Pipeline.ts#L24-L83
type IngestPipeline struct {
	// CreatedDate Date and time when the pipeline was created. Only returned if the `human`
	// query parameter is `true`.
	CreatedDate DateTime `json:"created_date,omitempty"`
	// CreatedDateMillis Date and time when the pipeline was created, in milliseconds since the epoch.
	CreatedDateMillis *int64 `json:"created_date_millis,omitempty"`
	// Deprecated Marks this ingest pipeline as deprecated.
	// When a deprecated ingest pipeline is referenced as the default or final
	// pipeline when creating or updating a non-deprecated index template,
	// Elasticsearch will emit a deprecation warning.
	Deprecated *bool `json:"deprecated,omitempty"`
	// Description Description of the ingest pipeline.
	Description *string `json:"description,omitempty"`
	// FieldAccessPattern Controls how processors in this pipeline should read and write data on a
	// document's source.
	FieldAccessPattern *fieldaccesspattern.FieldAccessPattern `json:"field_access_pattern,omitempty"`
	// Meta_ Arbitrary metadata about the ingest pipeline. This map is not automatically
	// generated by Elasticsearch.
	Meta_ Metadata `json:"_meta,omitempty"`
	// ModifiedDate Date and time when the pipeline was last modified. Only returned if the
	// `human` query parameter is `true`.
	ModifiedDate DateTime `json:"modified_date,omitempty"`
	// ModifiedDateMillis Date and time when the pipeline was last modified, in milliseconds since the
	// epoch.
	ModifiedDateMillis *int64 `json:"modified_date_millis,omitempty"`
	// OnFailure Processors to run immediately after a processor failure.
	OnFailure []ProcessorContainer `json:"on_failure,omitempty"`
	// Processors Processors used to perform transformations on documents before indexing.
	// Processors run sequentially in the order specified.
	Processors []ProcessorContainer `json:"processors,omitempty"`
	// Version Version number used by external systems to track ingest pipelines.
	Version *int64 `json:"version,omitempty"`
}

func (s *IngestPipeline) UnmarshalJSON(data []byte) error {

	dec := json.NewDecoder(bytes.NewReader(data))

	for {
		t, err := dec.Token()
		if err != nil {
			if errors.Is(err, io.EOF) {
				break
			}
			return err
		}

		switch t {

		case "created_date":
			if err := dec.Decode(&s.CreatedDate); err != nil {
				return fmt.Errorf("%s | %w", "CreatedDate", err)
			}

		case "created_date_millis":
			if err := dec.Decode(&s.CreatedDateMillis); err != nil {
				return fmt.Errorf("%s | %w", "CreatedDateMillis", err)
			}

		case "deprecated":
			var tmp any
			dec.Decode(&tmp)
			switch v := tmp.(type) {
			case string:
				value, err := strconv.ParseBool(v)
				if err != nil {
					return fmt.Errorf("%s | %w", "Deprecated", err)
				}
				s.Deprecated = &value
			case bool:
				s.Deprecated = &v
			}

		case "description":
			var tmp json.RawMessage
			if err := dec.Decode(&tmp); err != nil {
				return fmt.Errorf("%s | %w", "Description", err)
			}
			o := string(tmp[:])
			o, err = strconv.Unquote(o)
			if err != nil {
				o = string(tmp[:])
			}
			s.Description = &o

		case "field_access_pattern":
			if err := dec.Decode(&s.FieldAccessPattern); err != nil {
				return fmt.Errorf("%s | %w", "FieldAccessPattern", err)
			}

		case "_meta":
			if err := dec.Decode(&s.Meta_); err != nil {
				return fmt.Errorf("%s | %w", "Meta_", err)
			}

		case "modified_date":
			if err := dec.Decode(&s.ModifiedDate); err != nil {
				return fmt.Errorf("%s | %w", "ModifiedDate", err)
			}

		case "modified_date_millis":
			if err := dec.Decode(&s.ModifiedDateMillis); err != nil {
				return fmt.Errorf("%s | %w", "ModifiedDateMillis", err)
			}

		case "on_failure":
			if err := dec.Decode(&s.OnFailure); err != nil {
				return fmt.Errorf("%s | %w", "OnFailure", err)
			}

		case "processors":
			if err := dec.Decode(&s.Processors); err != nil {
				return fmt.Errorf("%s | %w", "Processors", err)
			}

		case "version":
			if err := dec.Decode(&s.Version); err != nil {
				return fmt.Errorf("%s | %w", "Version", err)
			}

		}
	}
	return nil
}

// NewIngestPipeline returns a IngestPipeline.
func NewIngestPipeline() *IngestPipeline {
	r := &IngestPipeline{}

	return r
}

type IngestPipelineVariant interface {
	IngestPipelineCaster() *IngestPipeline
}

func (s *IngestPipeline) IngestPipelineCaster() *IngestPipeline {
	return s
}
