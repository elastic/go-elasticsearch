// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated from the elasticsearch-specification DO NOT EDIT.
// https://github.com/elastic/elasticsearch-specification/tree/ea991724f4dd4f90c496eff547d3cc2e6529f509

package esdsl

import "github.com/elastic/go-elasticsearch/v8/typedapi/types"

type _indexTemplate struct {
	v *types.IndexTemplate
}

func NewIndexTemplate() *_indexTemplate {

	return &_indexTemplate{v: types.NewIndexTemplate()}

}

func (s *_indexTemplate) AllowAutoCreate(allowautocreate bool) *_indexTemplate {

	s.v.AllowAutoCreate = &allowautocreate

	return s
}

// An ordered list of component template names.
// Component templates are merged in the order specified, meaning that the last
// component template specified has the highest precedence.
func (s *_indexTemplate) ComposedOf(composedofs ...string) *_indexTemplate {

	for _, v := range composedofs {

		s.v.ComposedOf = append(s.v.ComposedOf, v)

	}
	return s
}

// If this object is included, the template is used to create data streams and
// their backing indices.
// Supports an empty object.
// Data streams require a matching index template with a `data_stream` object.
func (s *_indexTemplate) DataStream(datastream types.IndexTemplateDataStreamConfigurationVariant) *_indexTemplate {

	s.v.DataStream = datastream.IndexTemplateDataStreamConfigurationCaster()

	return s
}

// Marks this index template as deprecated.
// When creating or updating a non-deprecated index template that uses
// deprecated components,
// Elasticsearch will emit a deprecation warning.
func (s *_indexTemplate) Deprecated(deprecated bool) *_indexTemplate {

	s.v.Deprecated = &deprecated

	return s
}

// A list of component template names that are allowed to be absent.
func (s *_indexTemplate) IgnoreMissingComponentTemplates(names ...string) *_indexTemplate {

	s.v.IgnoreMissingComponentTemplates = names

	return s
}

// Name of the index template.
func (s *_indexTemplate) IndexPatterns(names ...string) *_indexTemplate {

	s.v.IndexPatterns = names

	return s
}

// Optional user metadata about the index template. May have any contents.
// This map is not automatically generated by Elasticsearch.
func (s *_indexTemplate) Meta_(metadata types.MetadataVariant) *_indexTemplate {

	s.v.Meta_ = *metadata.MetadataCaster()

	return s
}

// Priority to determine index template precedence when a new data stream or
// index is created.
// The index template with the highest priority is chosen.
// If no priority is specified the template is treated as though it is of
// priority 0 (lowest priority).
// This number is not automatically generated by Elasticsearch.
func (s *_indexTemplate) Priority(priority int64) *_indexTemplate {

	s.v.Priority = &priority

	return s
}

// Template to be applied.
// It may optionally include an `aliases`, `mappings`, or `settings`
// configuration.
func (s *_indexTemplate) Template(template types.IndexTemplateSummaryVariant) *_indexTemplate {

	s.v.Template = template.IndexTemplateSummaryCaster()

	return s
}

// Version number used to manage index templates externally.
// This number is not automatically generated by Elasticsearch.
func (s *_indexTemplate) Version(versionnumber int64) *_indexTemplate {

	s.v.Version = &versionnumber

	return s
}

func (s *_indexTemplate) IndexTemplateCaster() *types.IndexTemplate {
	return s.v
}
