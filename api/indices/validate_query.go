// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package indices

import (
	"fmt"
	"net/http"
	"net/url"
)

// ValidateQuery - the validate API allows a user to validate a potentially expensive query without executing it. See https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-validate.html for more info.
//
// options: optional parameters. Supports the following functional options: WithIndex, WithType, WithAllowNoIndices, WithAnalyzeWildcard, WithAnalyzer, WithDefaultOperator, WithDf, WithExpandWildcards, WithExplain, WithIgnoreUnavailable, WithLenient, WithOperationThreading, WithQ, WithRewrite, WithBody, WithErrorTrace, WithFilterPath, WithHuman, WithPretty, WithSourceParam, see the Option type in this package for more info.
func (i *Indices) ValidateQuery(options ...*Option) (*http.Response, error) {
	supportedOptions := map[string]struct{}{
		"WithIndex":              struct{}{},
		"WithType":               struct{}{},
		"WithAllowNoIndices":     struct{}{},
		"WithAnalyzeWildcard":    struct{}{},
		"WithAnalyzer":           struct{}{},
		"WithDefaultOperator":    struct{}{},
		"WithDf":                 struct{}{},
		"WithExpandWildcards":    struct{}{},
		"WithExplain":            struct{}{},
		"WithIgnoreUnavailable":  struct{}{},
		"WithLenient":            struct{}{},
		"WithOperationThreading": struct{}{},
		"WithQ":                  struct{}{},
		"WithRewrite":            struct{}{},
		"WithBody":               struct{}{},
		"WithErrorTrace":         struct{}{},
		"WithFilterPath":         struct{}{},
		"WithHuman":              struct{}{},
		"WithPretty":             struct{}{},
		"WithSourceParam":        struct{}{},
	}
	req := &http.Request{
		URL: &url.URL{
			Scheme: i.transport.URL.Scheme,
			Host:   i.transport.URL.Host,
		},
		Method: "GET",
	}
	for _, option := range options {
		if _, ok := supportedOptions[option.name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", option.name)
		}
		option.apply(req)
	}
	return i.transport.Do(req)
}
