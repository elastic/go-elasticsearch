// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package api

import (
	"fmt"
	"net/http"
	"net/url"
)

// CountPercolate - for indices created on or after version 5.0.0-alpha1 the percolator automatically indexes the query terms with the percolator queries. See https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html for more info.
//
// documentType: the type of the document being count percolated.
//
// index: the index of the document being count percolated.
//
// body: the count percolator request definition using the percolate DSL.
//
// options: optional parameters. Supports the following functional options: WithAllowNoIndices, WithErrorTrace, WithExpandWildcards, WithFilterPath, WithHuman, WithID, WithIgnoreUnavailable, WithPercolateIndex, WithPercolateType, WithPreference, WithPretty, WithRouting, WithSourceParam, WithVersion, WithVersionType, see the Option type in this package for more info.
func (a *API) CountPercolate(documentType string, index string, body map[string]interface{}, options ...*Option) (*http.Response, error) {
	supportedOptions := map[string]struct{}{
		"WithAllowNoIndices":    struct{}{},
		"WithErrorTrace":        struct{}{},
		"WithExpandWildcards":   struct{}{},
		"WithFilterPath":        struct{}{},
		"WithHuman":             struct{}{},
		"WithID":                struct{}{},
		"WithIgnoreUnavailable": struct{}{},
		"WithPercolateIndex":    struct{}{},
		"WithPercolateType":     struct{}{},
		"WithPreference":        struct{}{},
		"WithPretty":            struct{}{},
		"WithRouting":           struct{}{},
		"WithSourceParam":       struct{}{},
		"WithVersion":           struct{}{},
		"WithVersionType":       struct{}{},
	}
	req := &http.Request{
		URL: &url.URL{
			Scheme: a.transport.Scheme,
			Host:   a.transport.Host,
		},
		Method: "GET",
	}
	for _, option := range options {
		if _, ok := supportedOptions[option.name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", option.name)
		}
		option.apply(req)
	}
	return a.transport.Do(req)
}
