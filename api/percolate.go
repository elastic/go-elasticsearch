// generated by github.com/elastic/goelasticsearch/cmd/generator; DO NOT EDIT

package api

import (
	"fmt"
	"net/http"
	"net/url"
)

// Percolate - for indices created on or after version 5.0.0-alpha1 the percolator automatically indexes the query terms with the percolator queries. See https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html for more info.
//
// index: the index of the document being percolated.
//
// documentType: the type of the document being percolated.
//
// options: optional parameters. Supports the following functional options: WithID, WithAllowNoIndices, WithExpandWildcards, WithIgnoreUnavailable, WithPercolateFormat, WithPercolateIndex, WithPercolatePreference, WithPercolateRouting, WithPercolateType, WithPreference, WithRouting, WithVersion, WithVersionType, WithBody, WithErrorTrace, WithFilterPath, WithHuman, WithPretty, WithSourceParam, see the Option type in this package for more info.
func (a *API) Percolate(index string, documentType string, options ...*Option) (*http.Response, error) {
	supportedOptions := map[string]struct{}{
		"WithID":                  struct{}{},
		"WithAllowNoIndices":      struct{}{},
		"WithExpandWildcards":     struct{}{},
		"WithIgnoreUnavailable":   struct{}{},
		"WithPercolateFormat":     struct{}{},
		"WithPercolateIndex":      struct{}{},
		"WithPercolatePreference": struct{}{},
		"WithPercolateRouting":    struct{}{},
		"WithPercolateType":       struct{}{},
		"WithPreference":          struct{}{},
		"WithRouting":             struct{}{},
		"WithVersion":             struct{}{},
		"WithVersionType":         struct{}{},
		"WithBody":                struct{}{},
		"WithErrorTrace":          struct{}{},
		"WithFilterPath":          struct{}{},
		"WithHuman":               struct{}{},
		"WithPretty":              struct{}{},
		"WithSourceParam":         struct{}{},
	}
	req := &http.Request{
		URL: &url.URL{
			Scheme: a.transport.URL.Scheme,
			Host:   a.transport.URL.Host,
		},
		Method: "GET",
	}
	for _, option := range options {
		if _, ok := supportedOptions[option.name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", option.name)
		}
		option.apply(req)
	}
	return a.transport.Do(req)
}
