// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package nodes

import (
	"net/http"
	"time"
)

// DocumentType - the type to sample (default: cpu).
type DocumentType int

const (
	// DocumentTypeCPU can be used to set DocumentType to "cpu"
	DocumentTypeCPU = iota
	// DocumentTypeWait can be used to set DocumentType to "wait"
	DocumentTypeWait = iota
	// DocumentTypeBlock can be used to set DocumentType to "block"
	DocumentTypeBlock = iota
)

// Option is a non-required API option that gets applied to an HTTP request.
type Option struct {
	name  string
	apply func(r *http.Request)
}

// WithType - the type to sample (default: cpu).
func WithType(documentType DocumentType) *Option {
	return &Option{
		name: "WithType",
		apply: func(r *http.Request) {
		},
	}
}

// WithErrorTrace - include the stack trace of returned errors.
func WithErrorTrace(errorTrace bool) *Option {
	return &Option{
		name: "WithErrorTrace",
		apply: func(r *http.Request) {
		},
	}
}

// WithFilterPath - a comma-separated list of filters used to reduce the respone.
func WithFilterPath(filterPath []string) *Option {
	return &Option{
		name: "WithFilterPath",
		apply: func(r *http.Request) {
		},
	}
}

// WithFlatSettings - return settings in flat format (default: false).
func WithFlatSettings(flatSettings bool) *Option {
	return &Option{
		name: "WithFlatSettings",
		apply: func(r *http.Request) {
		},
	}
}

// WithHuman - return human readable values for statistics.
func WithHuman(human bool) *Option {
	return &Option{
		name: "WithHuman",
		apply: func(r *http.Request) {
		},
	}
}

// WithIgnoreIdleThreads - don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true).
func WithIgnoreIdleThreads(ignoreIdleThreads bool) *Option {
	return &Option{
		name: "WithIgnoreIdleThreads",
		apply: func(r *http.Request) {
		},
	}
}

// WithIndexMetric - limit the information returned for "indices" metric to the specific index metrics. Isn't used if "indices" (or "all") metric isn't specified.
func WithIndexMetric(indexMetric []string) *Option {
	return &Option{
		name: "WithIndexMetric",
		apply: func(r *http.Request) {
		},
	}
}

// WithInterval - the interval for the second sampling of threads.
func WithInterval(interval time.Time) *Option {
	return &Option{
		name: "WithInterval",
		apply: func(r *http.Request) {
		},
	}
}

// WithMetric - a comma-separated list of metrics you wish returned. Leave empty to return all.
func WithMetric(metric []string) *Option {
	return &Option{
		name: "WithMetric",
		apply: func(r *http.Request) {
		},
	}
}

// WithNodeID - a comma-separated list of node IDs or names to limit the returned information; use "_local" to return information from the node you're connecting to, leave empty to get information from all nodes.
func WithNodeID(nodeID []string) *Option {
	return &Option{
		name: "WithNodeID",
		apply: func(r *http.Request) {
		},
	}
}

// WithPretty - pretty format the returned JSON response.
func WithPretty(pretty bool) *Option {
	return &Option{
		name: "WithPretty",
		apply: func(r *http.Request) {
		},
	}
}

// WithSnapshots - number of samples of thread stacktrace (default: 10).
func WithSnapshots(snapshots int) *Option {
	return &Option{
		name: "WithSnapshots",
		apply: func(r *http.Request) {
		},
	}
}

// WithSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithSourceParam(sourceParam string) *Option {
	return &Option{
		name: "WithSourceParam",
		apply: func(r *http.Request) {
		},
	}
}

// WithThreads - specify the number of threads to provide information for (default: 3).
func WithThreads(threads int) *Option {
	return &Option{
		name: "WithThreads",
		apply: func(r *http.Request) {
		},
	}
}

// WithTimeout - explicit operation timeout.
func WithTimeout(timeout time.Time) *Option {
	return &Option{
		name: "WithTimeout",
		apply: func(r *http.Request) {
		},
	}
}

var (
	supportedOptions = map[string]map[string]struct{}{
		"HotThreads": map[string]struct{}{
			"WithNodeID":            struct{}{},
			"WithIgnoreIdleThreads": struct{}{},
			"WithInterval":          struct{}{},
			"WithSnapshots":         struct{}{},
			"WithThreads":           struct{}{},
			"WithTimeout":           struct{}{},
			"WithType":              struct{}{},
			"WithErrorTrace":        struct{}{},
			"WithFilterPath":        struct{}{},
			"WithHuman":             struct{}{},
			"WithPretty":            struct{}{},
			"WithSourceParam":       struct{}{},
		},
		"Info": map[string]struct{}{
			"WithMetric":       struct{}{},
			"WithNodeID":       struct{}{},
			"WithFlatSettings": struct{}{},
			"WithTimeout":      struct{}{},
			"WithErrorTrace":   struct{}{},
			"WithFilterPath":   struct{}{},
			"WithHuman":        struct{}{},
			"WithPretty":       struct{}{},
			"WithSourceParam":  struct{}{},
		},
		"Stats": map[string]struct{}{
			"WithIndexMetric":             struct{}{},
			"WithMetric":                  struct{}{},
			"WithNodeID":                  struct{}{},
			"WithCompletionFields":        struct{}{},
			"WithFielddataFields":         struct{}{},
			"WithFields":                  struct{}{},
			"WithGroups":                  struct{}{},
			"WithIncludeSegmentFileSizes": struct{}{},
			"WithLevel":                   struct{}{},
			"WithTimeout":                 struct{}{},
			"WithTypes":                   struct{}{},
			"WithErrorTrace":              struct{}{},
			"WithFilterPath":              struct{}{},
			"WithHuman":                   struct{}{},
			"WithPretty":                  struct{}{},
			"WithSourceParam":             struct{}{},
		},
	}
)
